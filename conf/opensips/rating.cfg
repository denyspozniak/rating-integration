#!CANYAN RATING ENGINE
#
# Canyan Rating engine - example configuration script
#     - web: https://www.canyan.io
#     - git: https://github.com/canyanio/integration
#

event_route[dialog:start] {
    $dlg_var(account_tag) = $fU;

    route(rating_begin_transaction);
}

event_route[dialog:end] {
    $dlg_var(account_tag) = $fU;

    route(rating_end_transaction);
}

route[rating_authorization] {
    $json(query) := "{\"transaction_tag\": $ci, \"account_tag\": $dlg_var(account_tag), \"source\": $fu, \"destination\": $tu}";
    xlog("L_NOTICE", "rating_authorization: $json(query)\n");
    async(rest_post("http://rating-agent:8000/v1/authorization", "$fU", , "$json(query)", "$var(ct)", "$var(rcode)"), rating_authorization_response);
}

route[rating_authorization_response] {
	$var(rc) = $rc;
	if ($var(rc) < 0) {
		xlog("async rest_put() failed with $var(rc), user=$fU\n");
		send_reply("500", "Server Internal Error 3");
		exit;
	}
	if ($var(rcode) >= 300) {
		xlog("async rest_put() rcode=$var(rcode), user=$fU\n");
		send_reply("500", "Server Internal Error 4");
		exit;
	}


    xlog("L_NOTICE", "rating_authorization_response: httpok=$http_ok httperr=$http_err httprb=$http_rb\n");
    if ($http_ok && $http_rs == 200) {
        if(!jansson_get("authorized", $http_rb, "$var(authorized)")) {
            xlog("L_ERR", "Cannot parse json data\n");
            exit;
        }
        jansson_get("max_available_units", $http_rb, "$var(max_available_units)");
        $var(max_available_units) = $(var(max_available_units){s.int});

        if ($var(authorized) != 1) {
            jansson_get("unauthorized_account_reason", $http_rb, "$var(unauthorized_reason)");
            if ($var(unauthorized_reason) != "") {
                switch ($var(unauthorized_reason)) {
                    case "NOT_FOUND":
                        route(rating_authorization_not_found);
                    case "NOT_ACTIVE":
                        route(rating_authorization_not_active);
                        break;
                    case "UNREACHEABLE_DESTINATION":
                        route(rating_authorization_response_unreacheable_destination);
                        break;
                    case "TOO_MANY_RUNNING_TRANSACTIONS":
                        route(rating_authorization_response_TOO_MANY_RUNNING_TRANSACTIONS);
                        break;
                    case "BALANCE_INSUFFICIENT":
                        route(rating_authorization_response_balance_insufficient);
                        break;
                    default:
                        route(rating_authorization_response_forbidden);
                }
            } else {
                xlog("L_NOTICE", "Setting dialog timeout to DEFAULT $var(max_available_units)\n");
                # $var(max_available_units) = 14400; ### CHECKME ALSO IN KAMA CONF
                $DLG_timeout = $var(max_available_units);
            }
        }

        jansson_get("carriers", $http_rb, "$dlg_var(carriers)");
        route(rating_authorization_parse_carriers);
    } else {
        if ($http_rs == 408) {
            send_reply(408, "Rating request timeout");
            xlog("L_ALERT", "Rating Agent is not available\n");
        } else {
            send_reply(500, "Rating Server Error");
            xlog("L_ALERT", "Rating Agent is not available\n");
        }
        exit;
    }

    $du = $dlg_var(carriers);
    route(SIPOUT);
}

route[rating_authorization_parse_carriers] {
    jansson_set("array", "carriers", $dlg_var(carriers), "$var(carriers)");
    jansson_array_size("carriers", $var(carriers), "$var(size)");
    $var(size) = $var(size) - 1;
    if ($var(size) >= 0) {
        while($var(size) >= 0) {
            jansson_get("carriers[$var(size)]", $var(carriers), "$var(v)");
            $dlg_var(carriers) = $(var(v){s.replace,UDP,sip});
            $var(size) = $var(size) - 1;
        }
        return;
    }

    send_reply(600, "No carrier found");
    xlog("L_ERR", "ERROR_rating_authorization_response var carriers: $dlg_var(carriers) - empty\n");
}

route[rating_begin_transaction] {
    $json(query) := "{\"transaction_tag\": $ci, \"account_tag\": $dlg_var(account_tag), \"source\": $fu, \"destination\": $tu}";
    xlog("L_NOTICE", "rating_authorization: $json(query)\n");
    async(rest_post("http://rating-agent:8000/v1/begin_transaction", "$fU", , "$json(query)", "$var(ct)", "$var(rcode)"), rating_begin_transaction_RESPONSE);
}

route[rating_begin_transaction_RESPONSE] {
    $var(rc) = $rc;
	if ($var(rc) < 0) {
		xlog("async rest_put() failed with $var(rc), user=$fU\n");
		send_reply("500", "Server Internal Error 3");
		exit;
	}
	if ($var(rcode) >= 300) {
		xlog("async rest_put() rcode=$var(rcode), user=$fU\n");
		send_reply("500", "Server Internal Error 4");
		exit;
	}

    xlog("L_NOTICE", "rating_begin_transaction_RESPONSE: httpok=$http_ok httperr=$http_err httprb=$http_rb\n");
    if ($http_ok && $http_rs == 200) {
        jansson_get("ok", $http_rb, "$var(ok)");
        if ($var(ok) == true) {
            return;
        }
    }
    send_reply(500, "Rating not available");
    xlog("L_ALERT", "Rating not available: $http_err\n");
    exit;
}

route[rating_end_transaction] {
    $json(query) := "{\"transaction_tag\": $ci, \"account_tag\": $dlg_var(account_tag), \"source\": $fu, \"destination\": $tu}";
    xlog("L_NOTICE", "rating_authorization: $json(query)\n");
    async(rest_post("http://rating-agent:8000/v1/end_transaction", "$fU", , "$json(query)", "$var(ct)", "$var(rcode)"), rating_end_transaction_response);
}

route[rating_end_transaction_response] {
    $var(rc) = $rc;
	if ($var(rc) < 0) {
		xlog("async rest_put() failed with $var(rc), user=$fU\n");
		send_reply("500", "Server Internal Error 3");
		exit;
	}
	if ($var(rcode) >= 300) {
		xlog("async rest_put() rcode=$var(rcode), user=$fU\n");
		send_reply("500", "Server Internal Error 4");
		exit;
	}

    xlog("L_NOTICE", "rating_end_transaction_response: httpok=$http_ok httperr=$http_err httprb=$http_rb\n");
    if ($http_ok && $http_rs == 200) {
        jansson_get("ok", $http_rb, "$var(ok)");
        if ($var(ok) == true) {
            return;
        }
    }
    send_reply(500, "Rating not available");
    xlog("L_ALERT", "Rating not available: $http_err\n");
    exit;
}

route[rating_authorization_not_found] {
    send_reply(403, "Forbidden -- rating account not found");
    exit;
}

route[rating_authorization_not_active] {
    send_reply(403, "Forbidden -- rating account not active");
    exit;
}

route[rating_authorization_response_unreacheable_destination] {
    send_reply(403, "Forbidden -- unreacheable rating destination");
    exit;
}

route[rating_authorization_response_too_many_running_transactions] {
    send_reply(403, "Forbidden -- too many ongoing calls");
    exit;
}

route[rating_authorization_response_balance_insufficient] {
    send_reply(403, "Forbidden -- insufficient balance");
    exit;
}

route[rating_authorization_response_forbidden] {
    send_reply(403, "Forbidden");
    exit;
}

route[rating_authorization_response_temporarily_unavailable] {
    send_reply(480, "Temporarily Unavailable");
    exit;
}
